aaa
ff=function(x){(x>1)}
sapply(aaa,ff)
ff=function(x){(x+1)}
sapply(aaa,ff)
aaa=matrix(c(1,2,3,4),ncol=2)
c(aaa)
aaa
cbind(c(aaa),c(aaa))
ff = function(x,y,l){x+y+l}
bbb=cbind(c(aaa),c(aaa))
bbb
apply(bbb,1,ff,l=1)
ff = function(x,l){x[1]+x[2]+l}
apply(bbb,1,ff,l=1)
apply(bbb,2,ff,l=1)
apply(bbb,1,ff,l=1)
debugSource('/Volumes/PERSONAL/MS/fash/fash.R')
debugSource('/Volumes/PERSONAL/MS/fash/fash.R')
bbb
bbb[,2]=rep(1,4)
bbb
ccc=c(1,0,2,0)
ccc*bbb
source('/Volumes/PERSONAL/MS/fash/fash.R')
bbb = fash(data$Fhat, df1=50, df2=50)
bbb = fash(data$Fhat, df1=50, df2=50)
head(alpha_beta)
tmp = apply(alpha_beta[1:60000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[1:10,],1,my_etruncf,v1=v1,v2=v2)
tmp
tmp = apply(alpha_beta[1:10000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:10010,],1,my_etruncf,v1=v1,v2=v2)
tmp
tmp = apply(alpha_beta[10001:20000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:15000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:16000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:17000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:18000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:19000,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:19500,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:19400,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[10001:19200,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19100,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19010,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19050,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19030,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19020,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19011,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19012,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19015,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19018,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19001:19019,],1,my_etruncf,v1=v1,v2=v2)
alpha_beta[19019,]
alpha_beta[19018,]
alpha_beta[19020,]
tmp = apply(alpha_beta[19020,],1,my_etruncf,v1=v1,v2=v2)
tmp = apply(alpha_beta[19020:19021,],1,my_etruncf,v1=v1,v2=v2)
tmp
extrunc(spec="f", df1=v1, df2=v2, a=100, b=101)
extrunc(spec="f", df1=v1, df2=v2, a=50, b=101)
extrunc(spec="f", df1=v1, df2=v2, a=50, b=51)
extrunc(spec="f", df1=v1, df2=v2, a=10, b=11)
extrunc(spec="f", df1=v1, df2=v2, a=20, b=21)
extrunc(spec="f", df1=v1, df2=v2, a=15, b=20)
extrunc(spec="f", df1=v1, df2=v2, a=15, b=16)
extrunc(spec="f", df1=v1, df2=v2, a=10, b=15)
extrunc(spec="f", df1=v1, df2=v2, a=14, b=15)
extrunc(spec="f", df1=v1, df2=v2, a=13, b=15)
extrunc(spec="f", df1=v1, df2=v2, a=14, b=15)
pf(10,df1=50,df2=50)
pf(10,df1=50,df2=50,log=TRUE)
pf(14,df1=50,df2=50,log=TRUE)
pf(15,df1=50,df2=50,log=TRUE)
pf(70,df1=50,df2=50,log=TRUE)
pf(100,df1=50,df2=50,log=TRUE)
df(100,df1=50,df2=50,log=TRUE)
df(70,df1=50,df2=50,log=TRUE)
load("/Volumes/PERSONAL/MS/dscr-gtex-vash/res_scaled.Rdata")
library(tidyr)
test = spread(res[,3:5], key=method, value=loglike)
test = test[,c(1,2,4,3,5)]
names(test)=c("scenario","limma","vash.sing","vash.prec","vash.var")
maxloglike=c("limma","vash.sing","vash.prec","vash.var")[apply(test[,2:5],1,which.max)]
test = cbind(test,maxloglike)
summary((pmax(test$vash.prec,test$vash.var)-test$limma)>0)
summary((pmax(test$vash.prec,test$vash.var)-test$vash.sing)>0)
diff = (pmax(test$vash.prec,test$vash.var)-test$vash.sing)
hist(diff)
hist(diff,500)
summary(diff)
out.prec = readRDS("/Volumes/PERSONAL/MS/dscr-gtex-vash/dsc-gtex-files/output/Cervix-Ectocervix,Testis/voom+vash.prec/vash_output/output.1.rds")
summary(out.prec$qvalue)
?vash
library(vash)
?vash
hist(diff)
hist(diff,50)
median(diff)
test[diff>=15 & diff<=16,]
test[diff>=median(diff) & diff<=16,]
test[diff>=median(diff) & diff<=16.5,]
test[diff>=median(diff) & diff<=16.5,]
library(devtools)
install_github("stephens999/ashr")
library(devtools)
install_github("stephens999/ashr")
install.packages("REBayes")
install.packages("Rmosek")
install.packages("REBayes")
install.packages("REBayes")
install.packages("REBayes")
install.packages("Rmosek")
Sys.getenv("PATH")
install.packages("Rmosek", repos="http://R-Forge.R-project.org",
type="source")
?install.packages
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/7")
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
Sys.getenv("PATH")
.libPaths()
?Sys.getenv
.libPaths()
install.packages("Rmosek", type="source", INSTALL_opts="--no-multiarch",
repos="http://download.mosek.com/R/7")
Sys.getenv("PATH")
source('/Volumes/PERSONAL/MS/fash/fash.R')
sim = function(N,Nnull,df1,df2,altsd,oneside=FALSE){
null = c(rep(1,Nnull),rep(0,N-Nnull))
logalpha = rep(0,N)
if (Nnull<N){
logalpha[(Nnull+1):N] = runif(N-Nnull,-altsd,altsd)
}
if (oneside==TRUE){
logalpha=abs(logalpha)
}
alpha = exp(logalpha)
Fhat = alpha*rf(N,df1=df1,df2=df2)
return(list(Fhat=Fhat,logalpha=logalpha, null=null))
}
data = sim(N=10000,Nnull=7000,df1=20,df2=20,altsd=4)
ccc = fash(data$Fhat, df1=20, df2=20, method="shrink")
?mixIP
ccc = fash(data$Fhat, df1=20, df2=20, method="shrink")
dim(matrix_lik)
prior
pi.init
controlinput
EMfit = mixIP(matrix_lik,prior,pi.init,control=controlinput)
ash(betahat=rnorm(100),sebetahat = rep(1,100))
?ash
aaa=ash(betahat=rnorm(100),sebetahat = rep(1,100))
library(ashr)
test=ash(betahat=rnorm(100),sebetahat = rep(1,100))
test=ash(betahat=rnorm(100),sebetahat=rep(1,100),method="shrink")
test=ash(betahat=rnorm(100),sebetahat=rep(1,100),mixcompdist="normal",method="shrink")
library(ashr)
test=ash(betahat=rnorm(100),sebetahat=rep(1,100))
devtools:::install_github("stephens999/ashr")
test=ash(betahat=rnorm(100),sebetahat=rep(1,100))
?ash
library(ashr)
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100))
?ash.workhorse
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100),optmethod="mixEM")
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100))
library(ashr)
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100))
devtools:::install_github("stephens999/ashr")
library(ashr)
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100))
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100),optmethod="mixEM")
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100))
?KWDual
sessionInfo()
test=ash.workhorse(betahat=rnorm(100),sebetahat=rep(1,100))
test=ash(betahat=rnorm(100),sebetahat=rep(1,100))
mixIP
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
install.packages("statmod")
sessionInfo()
install.packages("statmod")
install.packages("statmod")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
library("devtools")
install_github("jdstorey/qvalue")
install.packages("~/Desktop/qvalue_2.2.0.tar.gz",type="source",repos=NULL)
devtools::install_github("stephens999/ashr")
load("/Volumes/PERSONAL/UChicago/16Spring/224/Stat_224.RData")
load("/Volumes/PERSONAL/UChicago/16Spring/224/Stat_224_4e.RData")
load("/Volumes/PERSONAL/UChicago/16Spring/224/Stat_224.Rdata")
load("/Volumes/PERSONAL/UChicago/16Spring/224/Stat_224_4e.RData")
head(P054)
load("/Volumes/PERSONAL/UChicago/16Spring/224/Stat_224.RData")
head(P060)
GTEx_Data_V4_Annotations_SampleAttributesDS <- read.delim("~/Desktop/GTEx_Data_V4_Annotations_SampleAttributesDS.txt", stringsAsFactors=FALSE)
View(GTEx_Data_V4_Annotations_SampleAttributesDS)
organized.by.tissue <- read.table("/Volumes/PERSONAL/MS/gtex/organized.by.tissue.txt", quote="\"", stringsAsFactors=FALSE)
View(organized.by.tissue)
rm GTEx_Data_V4_Annotations_SampleAttributesDS
rm(GTEx_Data_V4_Annotations_SampleAttributesDS)
GTEx_Data_V6_Annotations_SampleAttributesDS <- read.delim("~/Desktop/GTEx_Data_V6_Annotations_SampleAttributesDS.txt", stringsAsFactors=FALSE)
View(GTEx_Data_V6_Annotations_SampleAttributesDS)
head(organized.by.tissue)
old=organized.by.tissue
organized.by.tissue = read.delim("/Volumes/PERSONAL/MS/gtex/GTEx_Data_V6_Annotations_SampleAttributesDS.txt", stringsAsFactors=FALSE)
head(organized.by.tissue)
organized.by.tissue = organized.by.tissue[,c(1,6,7)]
View(organized.by.tissue)
View(old)
samplename <- read.delim("/Volumes/PERSONAL/MS/gtex/samplename.txt", header=FALSE,stringsAsFactors=FALSE)
View(samplename)
fac=factor(rep(1:3,each=2))
X=model.matrix(~fac)
X
XX=X[,-1]
XX
X%*%solve(t(X)%*%X)%*%t(X)
W=rnorm(6)
W=rnorm(6)^2
XX%*%solve(t(XX)%*%XX)%*%t(XX)
X.w=sqrt(diag(W))%*%X
X.w%*%solve(t(X.w)%*%X.w)%*%t(X.w)
solve(t(X.w)%*%X.w)
(t(X.w)%*%X.w)^-1
(t(X.w)%*%X.w)
1/7.35544256
N = 10
K = 4
X = matrix(rnorm(matrix, nrow=N, ncol=K))
X = matrix(rnorm(N*K), nrow=N, ncol=K))
X = matrix(rnorm(N*K), nrow=N, ncol=K)
ratio = 5
beta = mvrnorm(1,0,ratio*solve(t(X)%*%X))
library(MASS)
beta = mvrnorm(1,0,ratio*solve(t(X)%*%X))
?mvrnorm
beta = mvrnorm(1,mu=0,Sigma=ratio*solve(t(X)%*%X))
ratio*solve(t(X)%*%X)
beta = mvrnorm(1,mu=rep(0,K),Sigma=ratio*solve(t(X)%*%X))
e = rnorm(N, 0, 1)
y = X%*%beta+e
m = lm(y~X)
m
m = lm(y~X+0)
m
anova(m)$F
anova(m)
library(MASS)
N = 10
K = 4
X = matrix(rnorm(N*K), nrow=N, ncol=K)
ratio = 5
flist = rep(0,1000)
for (i in 1:1000){
beta = mvrnorm(1,mu=rep(0,K),Sigma=ratio*solve(t(X)%*%X))
e = rnorm(N, 0, 1)
y = X%*%beta+e
m = lm(y~X+0)
frv = anova(m)$F[1]/(1+ratio)
flist[i] = frv
}
pval = 1-pf(flist, K, N-K)
hist(pval)
hist(pval,20)
flist = rep(0,10000)
for (i in 1:10000){
beta = mvrnorm(1,mu=rep(0,K),Sigma=ratio*solve(t(X)%*%X))
e = rnorm(N, 0, 1)
y = X%*%beta+e
m = lm(y~X+0)
frv = anova(m)$F[1]/(1+ratio)
flist[i] = frv
}
pval = 1-pf(flist, K, N-K)
hist(pval,20)
X=model.matrix(~factor(rep(1:3,each=2)))
w=rnorm(6)^2
t(X)%*%X
solve(t(X)%*%X)
solve(t(X)%*%X)
solve(t(X)%*%diag(w)%*%X)
w
(1.1937029+0.4246967)/2
solve(t(X[,-1])%*%diag(w)%*%X[,-1])
t(X)%*%diag(w)%*%X
w
0.9240415+1.1511078
solve(t(X)%*%X)
t(X)%*%X
w
t(X)%*%W%*%X
t(X)%*%diag(w)%*%X
X
XX=X
XX[,1]=c(1,1,0,0,0,0)
XX
t(XX)%*%XX
t(X)%*%X
t(XX)%*%diag(w)%*%XX
w
?avPlots
ash.test = function(betahat,sebetahat,
method = c("fdr","shrink"),
mixcompdist = c("uniform","halfuniform","normal","+uniform","-uniform"),
optmethod = c("mixIP","cxxMixSquarem","mixEM","mixVBEM"),
df=NULL,randomstart=FALSE,
nullweight=10,nonzeromode=FALSE,
pointmass = TRUE,
prior=c("nullbiased","uniform","unit"),
mixsd=NULL, gridmult=sqrt(2),
outputlevel=2,
g=NULL,
fixg=FALSE,
cxx=FALSE,
VB=FALSE,
model=c("EE","ET"),
control=list()){
ashargs = mget(names(formals()), sys.frame(sys.nframe()))
}
source('~/Desktop/ash.test.R')
betahat=rnorm(100)
sebetahat=1
test=ash.test(betahat,sebetahat)
ashargs = mget(names(formals()), sys.frame(sys.nframe()))
ashargs
debugSource('~/Desktop/ash.test.R')
betahat=rnorm(10)
sebetahat=1
test=ash.test(betahat,sebetahat)
test=ash.test(betahat,sebetahat)
if(length(sebetahat)==1){  sebetahat = rep(sebetahat,length(betahat))  }
if(length(sebetahat) != length(betahat)){
stop("Error: sebetahat must have length 1, or same length as betahat")
}
# Set optimization method (optmethod)
# if user tries to set both optmethod and VB/cxx that's an error
if(!missing(optmethod) && (!missing(VB) || !missing(cxx)) ){
stop("VB and cxx options are deprecated and incompatible with optmethod; use optmethod instead")
}
if(!missing(ashargs$optmethod) && (!missing(ashargs$VB) || !missing(ashargs$cxx)) ){
stop("VB and cxx options are deprecated and incompatible with optmethod; use optmethod instead")
}
ashargs$optmethod
ashargs
ashargs$optmethod
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
is.missing(optmethod)
missing(optmethod)
optmethod
class(optmethod)
null(optmethod)
is.null(optmethod)
aaa="mixIP"
missing(aaa)
cxx
df
missing(optmethod)
length(optmethod)
ashargs = mget(names(formals()), sys.frame(sys.nframe()))
ashargs$optmethod
match.arg(ashargs$optmethod)
?match.arg
?lm
?svd
?sva
library(sva)
?sva
?mget
test=ash.test(betahat,sebetahat)
ashargs = mget(names(formals()), sys.frame(sys.nframe()))
missing(ashargs$method)
ashargs$method
missing(ashargs$method[1])
class(ashargs$method)
length(ashargs$method)
?missing
library(ashr)
?ash.workhorse
aaa=ls()
aaa
aaa=mget(ls())
aaa
source('~/Desktop/ash.test.R')
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
ashargs = mget(names(formals()), sys.frame(sys.nframe()))
new=process_args(ashargs)
debugSource('~/Desktop/ash.test.R')
new=process_args(ashargs)
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
modified_ashargs = mget(names(formals()), sys.frame(sys.nframe()))
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
for (i in 1:length(ashargs)) assign(names(ashargs)[i], ashargs[[i]])
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
method
method = match.arg(method)
missing(method)
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
missing(optmethod)
missing(method)
method
method=match.args(method)
method=match.arg(method)
method
ashargs = mget(names(formals()), sys.frame(sys.nframe()))
ashargs = process_args(ashargs)
# assign each argument in the returned list to a variable
# that's used by the following code in ash.workhorse()
for (i in 1:length(ashargs)) assign(names(ashargs)[i], ashargs[[i]])
test=ash.test(betahat,sebetahat)
missing(optmethod)
if(missing(optmethod)){
if(require(REBayes,quietly=TRUE)){ #check whether REBayes package is present
optmethod = "mixIP"
} else{  #If REBayes package missing
message("Due to absence of package REBayes, switching to EM algorithm")
if(require(Rcpp)){
optmethod = "cxxMixSquarem"}
else {
optmethod = "mixEM" #fallback if neither Rcpp or REBayes are installed
message("Using vanilla EM; for faster performance install REBayes (preferred) or Rcpp")
}
}
} else { #if optmethod specified
optmethod = match.arg(optmethod)
}
optmethod
require(REBayes,quietly=TRUE)
aaa=require(REBayes,quietly=TRUE)
aaa
if(require(REBayes,quietly=TRUE)){ #check whether REBayes package is present
optmethod = "mixIP"
}
optmethod
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
optmethod
debugSource('~/Desktop/ash.test.R')
source('~/Desktop/ash.test.R')
debugSource('~/Desktop/ash.test.R')
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
ashargs
debugSource('~/Desktop/ash.test.R')
betahat=rnorm(10)
sebetahat=1
test=ash.test(betahat,sebetahat)
ashargs$ashargs
aaa=mget(ls())
test=ash.test(betahat,sebetahat)
debugSource('~/Desktop/ash.test.R')
test=ash.test(betahat,sebetahat)
ashargs
for (i in 1:length(ashargs)) assign(names(ashargs)[i], ashargs[[i]])
debugSource('~/Desktop/ash.test.R')
debugSource('~/Desktop/ash.test.R')
setwd("/Volumes/PERSONAL/MS/vash+ash/analysis")
library("dscr")
library("ashr")
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
load("../dsc-poisthin-dep/res.RData")
res$score = separate(res$score,scenario,c("scenario","nsamp"),",nsamp=")
res$score$nsamp = paste0("N=",res$score$nsamp)
res$score$nsamp = factor(res$score$nsamp, levels=c("N=2","N=10","N=50"))
res$score$scenario = factor(res$score$scenario, levels=c("spiky","near_normal","flat_top","big-normal","bimodal"))
res$score = filter(res$score,nsamp %in% c("N=2","N=10","N=50"))
res$score = filter(res$score, scenario %in% c("spiky","near_normal","flat_top","big-normal","bimodal"))
res$score1 = filter(res$score, method %in% c("DESeq2","edgeR","voom+limma","voom+vash+ash"))
res$score2 = filter(res$score, method %in% c("RUV+edgeR","RUV+voom+limma","RUV+voom+vash+ash"))
setEPS()
postscript('../paper/figures/pi0est2_dep.eps',width=6,height=6)
pi0_plot2=ggplot(res$score2,
aes(pi0,pi0.est,colour=method)) +geom_point(shape=1) +
facet_grid(nsamp ~ scenario) +
guides(alpha=FALSE) +
geom_abline(colour = "black") +
xlab("True pi0") +
ylab("Estimated pi0")
print(pi0_plot2 +scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(limits=c(0,1)) +
coord_equal(ratio=1) + theme(legend.position = "top",axis.text.x = element_text(size = 8,angle=45)))
dev.off()
setEPS()
postscript('../paper/figures/fsp_dep.eps',width=6,height=6)
res$score$FSP_005[is.na(res$score$FSP_005)]=0
fsp_plot=ggplot(res$score[res$score$method=="voom+vash+ash",],
aes(pi0,FSP_005,colour=method)) +geom_point(shape=1) +
facet_grid(nsamp ~ scenario) +
guides(alpha=FALSE) +
geom_abline(slope=0,intercept=0.05,colour = "black") +
xlab("True pi0") +
ylab("False sign proportion when s=0.05")
print(fsp_plot +scale_y_continuous(limits=c(0,0.06)) +
scale_x_continuous(limits=c(0,1)) +
coord_equal(ratio=10) + theme(legend.position = "top",axis.text.x = element_text(size = 8,angle=45)))
dev.off()
